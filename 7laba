#include <iostream>
#include <vector>
#include <string>
#include <memory>

// Базовый класс: Транспорт
class Transport {
protected:
    std::string name;    // Название транспорта
    double speed;        // Скорость в км/ч
    double capacity;     // Вместимость (например, пассажиры или груз)

public:
    // Конструктор
    Transport(const std::string& name, double speed, double capacity)
        : name(name), speed(speed), capacity(capacity) {}

    // Виртуальный деструктор
    virtual ~Transport() {}

    // Виртуальный метод для отображения информации
    virtual void displayInfo() const {
        std::cout << "Транспорт: " << name 
                  << ", Скорость: " << speed << " км/ч"
                  << ", Вместимость: " << capacity << std::endl;
    }

    // Метод для получения скорости
    double getSpeed() const {
        return speed;
    }

    // Метод для получения вместимости
    double getCapacity() const {
        return capacity;
    }
};

// Класс-наследник: Автомобиль
class Car : public Transport {
private:
    double fuelConsumption; // Расход топлива (л/100 км)

public:
    // Конструктор
    Car(const std::string& name, double speed, double capacity, double fuelConsumption)
        : Transport(name, speed, capacity), fuelConsumption(fuelConsumption) {}

    // Переопределение метода отображения информации
    void displayInfo() const override {
        std::cout << "Автомобиль: " << name 
                  << ", Скорость: " << speed << " км/ч"
                  << ", Вместимость: " << capacity << " чел."
                  << ", Расход топлива: " << fuelConsumption << " л/100 км" << std::endl;
    }

    // Метод для получения расхода топлива
    double getFuelConsumption() const {
        return fuelConsumption;
    }
};

// Класс-наследник: Велосипед
class Bicycle : public Transport {
private:
    std::string type; // Тип велосипеда (например, "Горный", "Шоссейный")

public:
    // Конструктор
    Bicycle(const std::string& name, double speed, double capacity, const std::string& type)
        : Transport(name, speed, capacity), type(type) {}

    // Переопределение метода отображения информации
    void displayInfo() const override {
        std::cout << "Велосипед: " << name 
                  << ", Скорость: " << speed << " км/ч"
                  << ", Вместимость: " << capacity << " чел."
                  << ", Тип: " << type << std::endl;
    }

    // Метод для получения типа велосипеда
    std::string getType() const {
        return type;
    }
};

int main() {
    // Вектор для хранения различных транспортных средств
    std::vector<std::shared_ptr<Transport>> transports;

    // Создание объектов классов-наследников
    transports.push_back(std::make_shared<Car>("Седан", 120.0, 5, 8.5));
    transports.push_back(std::make_shared<Bicycle>("Горный велосипед", 25.0, 1, "Горный"));
    transports.push_back(std::make_shared<Car>("Грузовик", 80.0, 3, 25.0));
    transports.push_back(std::make_shared<Bicycle>("Шоссейный велосипед", 30.0, 1, "Шоссейный"));

    // Вывод информации о каждом транспортном средстве
    std::cout << "Информация о транспорте:\n";
    for (const auto& transport : transports) {
        transport->displayInfo();
    }

    // Пример расчета средней скорости всех транспортных средств
    double totalSpeed = 0;
    for (const auto& transport : transports) {
        totalSpeed += transport->getSpeed();
    }
    double averageSpeed = totalSpeed / transports.size();
    std::cout << "\nСредняя скорость транспорта: " << averageSpeed << " км/ч" << std::endl;

    return 0;
}