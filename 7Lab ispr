#include <iostream>
#include <sqlite3.h>
#include <string>

using namespace std;

// Функция для выполнения SQL-команд
void executeSQL(sqlite3* db, const string& sql, const string& successMessage) {
    char* errorMessage = nullptr;
    int rc = sqlite3_exec(db, sql.c_str(), nullptr, nullptr, &errorMessage);
    if (rc != SQLITE_OK) {
        cerr << "Ошибка SQL: " << errorMessage << endl;
        sqlite3_free(errorMessage);
    } else {
        cout << successMessage << endl;
    }
}

// Функция для отображения всех записей из таблицы
int callback(void* NotUsed, int argc, char** argv, char** azColName) {
    for (int i = 0; i < argc; i++) {
        cout << azColName[i] << ": " << (argv[i] ? argv[i] : "NULL") << "\t";
    }
    cout << endl;
    return 0;
}

int main() {
    sqlite3* db;
    string dbName = "transport.db";

    // Открытие или создание базы данных
    int rc = sqlite3_open(dbName.c_str(), &db);
    if (rc) {
        cerr << "Не удалось открыть базу данных: " << sqlite3_errmsg(db) << endl;
        return 1;
    } else {
        cout << "База данных успешно открыта: " << dbName << endl;
    }

    // Создание таблицы
    string createTableSQL = "CREATE TABLE IF NOT EXISTS transport ("
                            "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                            "name TEXT NOT NULL, "
                            "type TEXT NOT NULL, "
                            "capacity INTEGER, "
                            "price REAL);";
    executeSQL(db, createTableSQL, "Таблица 'transport' создана или уже существует.");

    // Добавление записей
    string insertDataSQL =
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Toyota Corolla', 'Car', 5, 20000.0);"
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Boeing 737', 'Airplane', 200, 100000000.0);"
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Ford Transit', 'Van', 12, 35000.0);"
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Tesla Model S', 'Car', 5, 80000.0);"
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Scania R500', 'Truck', 2, 120000.0);"
        "INSERT INTO transport (name, type, capacity, price) VALUES ('Yamaha MT-07', 'Motorcycle', 2, 7000.0);";
    executeSQL(db, insertDataSQL, "Записи добавлены в таблицу.");

    // Вывод всех записей
    cout << "Содержимое таблицы 'transport':" << endl;
    string selectAllSQL = "SELECT * FROM transport;";
    sqlite3_exec(db, selectAllSQL.c_str(), callback, nullptr, nullptr);

    // Обновление записи
    string updateSQL = "UPDATE transport SET price = 75000.0 WHERE name = 'Ford Transit';";
    executeSQL(db, updateSQL, "Цена для Ford Transit обновлена.");

    // Удаление записи
    string deleteSQL = "DELETE FROM transport WHERE name = 'Yamaha MT-07';";
    executeSQL(db, deleteSQL, "Запись для Yamaha MT-07 удалена.");

    // Подсчет записей
    cout << "Количество записей в таблице:" << endl;
    string countSQL = "SELECT COUNT(*) AS Total FROM transport;";
    sqlite3_exec(db, countSQL.c_str(), callback, nullptr, nullptr);

    // Сортировка записей по цене
    cout << "Записи, отсортированные по цене (убывание):" << endl;
    string sortSQL = "SELECT * FROM transport ORDER BY price DESC;";
    sqlite3_exec(db, sortSQL.c_str(), callback, nullptr, nullptr);

    // Закрытие базы данных
    sqlite3_close(db);
    cout << "База данных закрыта." << endl;

    return 0;
}